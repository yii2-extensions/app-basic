name: Docker CI

on:
  pull_request:
    paths:
      - 'docker/**'
      - 'docker-compose*.yml'
      - '.github/workflows/docker-ci.yml'
  push:
    paths:
      - 'docker/**'
      - 'docker-compose*.yml'
      - '.github/workflows/docker-ci.yml'

jobs:
  test-apache:
    name: Test Apache Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code.
        uses: actions/checkout@v4

      - name: Set up Docker Buildx.
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build Apache image.
        run: docker-compose build yii2-apache

      - name: Start Apache container.
        run: docker-compose up -d yii2-apache

      - name: Wait for Apache to be ready.
        run: timeout 60 sh -c 'until curl -f http://localhost:8080/health || curl -f http://localhost:8080 ; do sleep 2; done'

      - name: Test Apache container health.
        run: |
          # Test that Apache is responding
          curl -f http://localhost:8080 || echo "Apache not responding"

          # Check that supervisord is running all services
          docker exec $(docker-compose ps -q yii2-apache) supervisorctl status

          # Check for any container errors
          docker logs $(docker-compose ps -q yii2-apache) 2>&1 | grep -i error && exit 1 || true

      - name: Test PHP functionality.
        run: |
          # Test PHP is working
          docker exec $(docker-compose ps -q yii2-apache) php -v

          # Test Yii2 application (if you have a test endpoint)
          # curl -f http://localhost:8080/site/about || echo "Yii2 routes not working"

      - name: Stop Apache container.
        run: docker-compose down yii2-apache

  test-nginx:
    name: Test Nginx Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build Nginx image
        run: docker-compose -f docker-compose.nginx.yml build yii2-nginx

      - name: Start Nginx container
        run: docker-compose -f docker-compose.nginx.yml up -d yii2-nginx

      - name: Wait for Nginx to be ready
        run: timeout 60 sh -c 'until curl -f http://localhost:8081/health || curl -f http://localhost:8081 ; do sleep 2; done'

      - name: Test Nginx container health
        run: |
          # Test that Nginx is responding
          curl -f http://localhost:8081 || echo "Nginx not responding"

          # Check that supervisord is running all services
          docker exec $(docker-compose -f docker-compose.nginx.yml ps -q yii2-nginx) supervisorctl status

          # Check for any container errors
          docker logs $(docker-compose -f docker-compose.nginx.yml ps -q yii2-nginx) 2>&1 | grep -i error && exit 1 || true

      - name: Test PHP-FPM functionality
        run: |
          # Test PHP-FPM is working
          docker exec $(docker-compose -f docker-compose.nginx.yml ps -q yii2-nginx) php -v

          # Test that PHP-FPM is listening
          docker exec $(docker-compose -f docker-compose.nginx.yml ps -q yii2-nginx) netstat -ln | grep :9000

      - name: Test Queue Workers
        run: |
          # Check that queue workers are running
          docker exec $(docker-compose -f docker-compose.nginx.yml ps -q yii2-nginx) supervisorctl status | grep yii-queue-worker

      - name: Stop Nginx container
        run: docker-compose -f docker-compose.nginx.yml down yii2-nginx

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test-apache, test-nginx]

    steps:
      - name: Checkout code.
        uses: actions/checkout@v4

      - name: Build images for scanning.
        run: |
          docker-compose build
          docker-compose -f docker-compose.nginx.yml build

      - name: Run Trivy vulnerability scanner - Apache
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'yii2-apache:84'
          format: 'sarif'
          output: 'trivy-apache-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner - Nginx
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'yii2-nginx:84'
          format: 'sarif'
          output: 'trivy-nginx-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-apache-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-nginx-results.sarif'
